package com.example.demo.service;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import javax.transaction.Transactional;

import org.apache.log4j.Logger;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import com.example.demo.domain.Role;
import com.example.demo.domain.User;
import com.example.demo.repo.RoleRepo;
import com.example.demo.repo.UserRepo;

import lombok.RequiredArgsConstructor;

@Service 
@RequiredArgsConstructor /*יוצר בנאי עם ארגומנטים נדרשים*/
@Transactional
public class UserServiceImpl implements UserService , UserDetailsService{
	
	private final UserRepo userRepo;
	private final RoleRepo roleRepo;
	private static final Logger log = Logger.getLogger(UserServiceImpl.class);
	
	@Override
	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
		User user = userRepo.findByUsername(username);
		if(user == null) {
			log.error("User not found in the database");
			throw new UsernameNotFoundException("User not found in the database");
		}else {
			log.info("User found in the database: "+username);
		}
		
		Collection<SimpleGrantedAuthority> authorities = new ArrayList<>();
		user.getRoles().forEach(role -> {
			authorities.add(new SimpleGrantedAuthority(role.getName()));	
		});
		
		return new org.springframework.security.core.userdetails.User(user.getUsername(),user.getPassword(), authorities);
	}

	@Override
	public User saveUser(User user) {
		log.info("Saving new user "+ user.getName() +" to the db");
		return userRepo.save(user);
	}

	@Override
	public Role saveRole(Role role) {
		log.info("Saving new role "+role.getName()+" to the db");
		return roleRepo.save(role);
	}

	@Override
	public void addRoleToUser(String username, String roleName) {
		log.info("Adding role" +roleName+" to user "+username+"");
		User user = userRepo.findByUsername(username);
		Role role = roleRepo.findByName(roleName);
		user.getRoles().add(role);
	}

	@Override
	public User getUser(String username) {
		log.info("Getting user "+username+"");
		return userRepo.findByUsername(username);
	}

	@Override
	public List<User> getUsers() {
		log.info("Getting all users");
		return userRepo.findAll();
	}
	
}
